{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = () => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let silverSupply = await store.getState().blockchain.smartContract.methods.getSilverSupply().call();\n      let diamondSupply = 7;\n      /*await store\n      .getState()\n      .blockchain.smartContract.methods.getDiamondSupply()\n      .call();\n      */\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      console.log(\"silversupply:\", silverSupply);\n      dispatch(fetchDataSuccess({\n        silverSupply,\n        diamondSupply // cost,\n\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/dylanair/Documents/GitHub/hashlips_nft_minting_dapp/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","silverSupply","getState","blockchain","smartContract","methods","getSilverSupply","call","diamondSupply","console","log","err"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAG,MAAM;AAC7B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIO,YAAY,GAAG,MAAMR,KAAK,CAC3BS,QADsB,GAEtBC,UAFsB,CAEXC,aAFW,CAEGC,OAFH,CAEWC,eAFX,GAGtBC,IAHsB,EAAzB;AAIA,UAAIC,aAAa,GAAG,CAApB;AAAuB;AAC7B;AACA;AACA;AACA;AACM;AACA;AACA;AACA;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BT,YAA5B;AACAD,MAAAA,QAAQ,CACNJ,gBAAgB,CAAC;AACfK,QAAAA,YADe;AAEfO,QAAAA,aAFe,CAGf;;AAHe,OAAD,CADV,CAAR;AAOD,KAtBD,CAsBE,OAAOG,GAAP,EAAY;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAX,MAAAA,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GA5BD;AA6BD,CA9BM","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = () => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let silverSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.getSilverSupply()\n        .call();\n      let diamondSupply = 7; /*await store\n        .getState()\n        .blockchain.smartContract.methods.getDiamondSupply()\n        .call();\n        */\n      // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n      console.log(\"silversupply:\",silverSupply);\n      dispatch(\n        fetchDataSuccess({\n          silverSupply,\n          diamondSupply\n          // cost,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}